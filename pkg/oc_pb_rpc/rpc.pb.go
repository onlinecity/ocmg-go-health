// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package oc_pb_rpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Encoding int32

const (
	Encoding_BOOL          Encoding = 1
	Encoding_CHAR          Encoding = 2
	Encoding_SIGNED_CHAR   Encoding = 3
	Encoding_UNSIGNED_CHAR Encoding = 4
	Encoding_INT8          Encoding = 5
	Encoding_UINT8         Encoding = 6
	Encoding_INT16         Encoding = 7
	Encoding_UINT16        Encoding = 8
	Encoding_INT32         Encoding = 9
	Encoding_UINT32        Encoding = 10
	Encoding_INT64         Encoding = 11
	Encoding_UINT64        Encoding = 12
	Encoding_FLOAT         Encoding = 13
	Encoding_DOUBLE        Encoding = 14
	Encoding_LONG_DOUBLE   Encoding = 15
	Encoding_STRING        Encoding = 16
	Encoding_PROTOBUF      Encoding = 17
)

var Encoding_name = map[int32]string{
	1:  "BOOL",
	2:  "CHAR",
	3:  "SIGNED_CHAR",
	4:  "UNSIGNED_CHAR",
	5:  "INT8",
	6:  "UINT8",
	7:  "INT16",
	8:  "UINT16",
	9:  "INT32",
	10: "UINT32",
	11: "INT64",
	12: "UINT64",
	13: "FLOAT",
	14: "DOUBLE",
	15: "LONG_DOUBLE",
	16: "STRING",
	17: "PROTOBUF",
}

var Encoding_value = map[string]int32{
	"BOOL":          1,
	"CHAR":          2,
	"SIGNED_CHAR":   3,
	"UNSIGNED_CHAR": 4,
	"INT8":          5,
	"UINT8":         6,
	"INT16":         7,
	"UINT16":        8,
	"INT32":         9,
	"UINT32":        10,
	"INT64":         11,
	"UINT64":        12,
	"FLOAT":         13,
	"DOUBLE":        14,
	"LONG_DOUBLE":   15,
	"STRING":        16,
	"PROTOBUF":      17,
}

func (x Encoding) Enum() *Encoding {
	p := new(Encoding)
	*p = x
	return p
}

func (x Encoding) String() string {
	return proto.EnumName(Encoding_name, int32(x))
}

func (x *Encoding) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Encoding_value, data, "Encoding")
	if err != nil {
		return err
	}
	*x = Encoding(value)
	return nil
}

func (Encoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

type Exception struct {
	Message                      *string  `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
	Code                         *uint32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Variables                    []string `protobuf:"bytes,3,rep,name=variables" json:"variables,omitempty"`
	IncidentUuid                 []byte   `protobuf:"bytes,4,opt,name=incident_uuid,json=incidentUuid" json:"incident_uuid,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
	XXX_sizecache                int32  `json:"-"`
}

func (m *Exception) Reset()         { *m = Exception{} }
func (m *Exception) String() string { return proto.CompactTextString(m) }
func (*Exception) ProtoMessage()    {}
func (*Exception) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

var extRange_Exception = []proto.ExtensionRange{
	{Start: 256, End: 65535},
}

func (*Exception) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_Exception
}

func (m *Exception) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Exception.Unmarshal(m, b)
}
func (m *Exception) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Exception.Marshal(b, m, deterministic)
}
func (m *Exception) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exception.Merge(m, src)
}
func (m *Exception) XXX_Size() int {
	return xxx_messageInfo_Exception.Size(m)
}
func (m *Exception) XXX_DiscardUnknown() {
	xxx_messageInfo_Exception.DiscardUnknown(m)
}

var xxx_messageInfo_Exception proto.InternalMessageInfo

func (m *Exception) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *Exception) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *Exception) GetVariables() []string {
	if m != nil {
		return m.Variables
	}
	return nil
}

func (m *Exception) GetIncidentUuid() []byte {
	if m != nil {
		return m.IncidentUuid
	}
	return nil
}

type Argument struct {
	Type                 *Encoding `protobuf:"varint,1,req,name=type,enum=oc.pb.rpc.Encoding" json:"type,omitempty"`
	Package              *string   `protobuf:"bytes,2,opt,name=package" json:"package,omitempty"`
	Message              *string   `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Repeated             *bool     `protobuf:"varint,4,opt,name=repeated" json:"repeated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Argument) Reset()         { *m = Argument{} }
func (m *Argument) String() string { return proto.CompactTextString(m) }
func (*Argument) ProtoMessage()    {}
func (*Argument) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *Argument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Argument.Unmarshal(m, b)
}
func (m *Argument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Argument.Marshal(b, m, deterministic)
}
func (m *Argument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Argument.Merge(m, src)
}
func (m *Argument) XXX_Size() int {
	return xxx_messageInfo_Argument.Size(m)
}
func (m *Argument) XXX_DiscardUnknown() {
	xxx_messageInfo_Argument.DiscardUnknown(m)
}

var xxx_messageInfo_Argument proto.InternalMessageInfo

func (m *Argument) GetType() Encoding {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Encoding_BOOL
}

func (m *Argument) GetPackage() string {
	if m != nil && m.Package != nil {
		return *m.Package
	}
	return ""
}

func (m *Argument) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *Argument) GetRepeated() bool {
	if m != nil && m.Repeated != nil {
		return *m.Repeated
	}
	return false
}

type Procedure struct {
	Name                 *string     `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Input                []*Argument `protobuf:"bytes,2,rep,name=input" json:"input,omitempty"`
	Output               []*Argument `protobuf:"bytes,3,rep,name=output" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Procedure) Reset()         { *m = Procedure{} }
func (m *Procedure) String() string { return proto.CompactTextString(m) }
func (*Procedure) ProtoMessage()    {}
func (*Procedure) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{2}
}

func (m *Procedure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Procedure.Unmarshal(m, b)
}
func (m *Procedure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Procedure.Marshal(b, m, deterministic)
}
func (m *Procedure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Procedure.Merge(m, src)
}
func (m *Procedure) XXX_Size() int {
	return xxx_messageInfo_Procedure.Size(m)
}
func (m *Procedure) XXX_DiscardUnknown() {
	xxx_messageInfo_Procedure.DiscardUnknown(m)
}

var xxx_messageInfo_Procedure proto.InternalMessageInfo

func (m *Procedure) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Procedure) GetInput() []*Argument {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Procedure) GetOutput() []*Argument {
	if m != nil {
		return m.Output
	}
	return nil
}

type Service struct {
	Name                 *string      `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	ServicePrefix        *uint32      `protobuf:"varint,2,req,name=service_prefix,json=servicePrefix" json:"service_prefix,omitempty"`
	Procedures           []*Procedure `protobuf:"bytes,3,rep,name=procedures" json:"procedures,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{3}
}

func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Service) GetServicePrefix() uint32 {
	if m != nil && m.ServicePrefix != nil {
		return *m.ServicePrefix
	}
	return 0
}

func (m *Service) GetProcedures() []*Procedure {
	if m != nil {
		return m.Procedures
	}
	return nil
}

func init() {
	proto.RegisterEnum("oc.pb.rpc.Encoding", Encoding_name, Encoding_value)
	proto.RegisterType((*Exception)(nil), "oc.pb.rpc.Exception")
	proto.RegisterType((*Argument)(nil), "oc.pb.rpc.Argument")
	proto.RegisterType((*Procedure)(nil), "oc.pb.rpc.Procedure")
	proto.RegisterType((*Service)(nil), "oc.pb.rpc.Service")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x5f, 0x8b, 0xda, 0x4c,
	0x14, 0xc6, 0xc9, 0x1f, 0x35, 0x39, 0x1a, 0x77, 0x76, 0xde, 0xf7, 0x22, 0x94, 0x5e, 0x04, 0x4b,
	0x69, 0xba, 0x05, 0xa1, 0xae, 0x48, 0x6f, 0xb5, 0xeb, 0x5a, 0x41, 0x12, 0x19, 0xcd, 0xb5, 0x64,
	0x93, 0xa9, 0x0c, 0xad, 0xc9, 0x30, 0x26, 0xdb, 0x6d, 0xaf, 0x84, 0xd2, 0xaf, 0xd9, 0xcf, 0x52,
	0x26, 0xc9, 0x58, 0x0b, 0xed, 0xdd, 0x33, 0xbf, 0xf3, 0xc0, 0xf9, 0x9d, 0x01, 0x5b, 0xf0, 0x64,
	0xc8, 0x45, 0x5e, 0xe4, 0xd8, 0xce, 0x93, 0x21, 0x7f, 0x18, 0x0a, 0x9e, 0x0c, 0x7e, 0x68, 0x60,
	0xcf, 0x9f, 0x12, 0xca, 0x0b, 0x96, 0x67, 0xd8, 0x85, 0xce, 0x81, 0x1e, 0x8f, 0xf1, 0x9e, 0xba,
	0x9a, 0xa7, 0xfb, 0x36, 0x51, 0x4f, 0x8c, 0xc1, 0x4c, 0xf2, 0x94, 0xba, 0xba, 0xa7, 0xf9, 0x0e,
	0xa9, 0x32, 0x7e, 0x0e, 0xf6, 0x63, 0x2c, 0x58, 0xfc, 0xf0, 0x99, 0x1e, 0x5d, 0xc3, 0x33, 0x7c,
	0x9b, 0xfc, 0x06, 0xf8, 0x05, 0x38, 0x2c, 0x4b, 0x58, 0x4a, 0xb3, 0x62, 0x57, 0x96, 0x2c, 0x75,
	0x4d, 0x4f, 0xf3, 0x7b, 0xa4, 0xa7, 0x60, 0x54, 0xb2, 0xf4, 0xa6, 0x63, 0x9d, 0x74, 0x74, 0x3a,
	0x99, 0x83, 0xef, 0x1a, 0x58, 0x53, 0xb1, 0x2f, 0x0f, 0x34, 0x2b, 0xf0, 0x2b, 0x30, 0x8b, 0xaf,
	0xbc, 0x76, 0xe8, 0x8f, 0xfe, 0x1b, 0x9e, 0x75, 0x87, 0xf3, 0x2c, 0xc9, 0x53, 0x96, 0xed, 0x49,
	0x55, 0x90, 0xbe, 0x3c, 0x4e, 0x3e, 0x49, 0x5f, 0x29, 0x66, 0x13, 0xf5, 0xbc, 0xbc, 0xc4, 0xa8,
	0x27, 0xea, 0x92, 0x67, 0x60, 0x09, 0xca, 0x69, 0x5c, 0xd0, 0x5a, 0xc9, 0x22, 0xe7, 0xf7, 0xe0,
	0x0b, 0xd8, 0x6b, 0x91, 0x27, 0x34, 0x2d, 0x45, 0x75, 0x72, 0x16, 0x1f, 0xd4, 0x4f, 0x54, 0x19,
	0xbf, 0x86, 0x16, 0xcb, 0x78, 0x59, 0xb8, 0xba, 0x67, 0xf8, 0xdd, 0x3f, 0xd4, 0x94, 0x3d, 0xa9,
	0x1b, 0xf8, 0x0d, 0xb4, 0xf3, 0xb2, 0x90, 0x5d, 0xe3, 0xdf, 0xdd, 0xa6, 0x32, 0xf8, 0x06, 0x9d,
	0x0d, 0x15, 0x8f, 0x2c, 0xf9, 0xfb, 0xda, 0x97, 0xd0, 0x3f, 0xd6, 0xe3, 0x1d, 0x17, 0xf4, 0x23,
	0x7b, 0x72, 0x75, 0x4f, 0xf7, 0x1d, 0xe2, 0x34, 0x74, 0x5d, 0x41, 0x3c, 0x06, 0xe0, 0x4a, 0xff,
	0xd8, 0xac, 0xfd, 0xff, 0x62, 0xed, 0xf9, 0x36, 0x72, 0xd1, 0xbb, 0xf9, 0xa9, 0x81, 0xa5, 0xfe,
	0x15, 0x5b, 0x60, 0xce, 0xc2, 0x70, 0x85, 0x34, 0x99, 0xde, 0x7f, 0x98, 0x12, 0xa4, 0xe3, 0x2b,
	0xe8, 0x6e, 0x96, 0x8b, 0x60, 0x7e, 0xb7, 0xab, 0x80, 0x81, 0xaf, 0xc1, 0x89, 0x82, 0x4b, 0x64,
	0xca, 0xf6, 0x32, 0xd8, 0xbe, 0x43, 0x2d, 0x6c, 0x43, 0x2b, 0xaa, 0x62, 0x5b, 0xc6, 0x65, 0xb0,
	0x7d, 0x3b, 0x41, 0x1d, 0x0c, 0xd0, 0x8e, 0xea, 0x6c, 0x35, 0xf8, 0x76, 0x84, 0x6c, 0x85, 0x6f,
	0x47, 0x08, 0x1a, 0x3c, 0x19, 0xa3, 0xae, 0xc2, 0x93, 0x31, 0xea, 0x49, 0x7c, 0xbf, 0x0a, 0xa7,
	0x5b, 0xe4, 0x48, 0x7c, 0x17, 0x46, 0xb3, 0xd5, 0x1c, 0xf5, 0xa5, 0xd4, 0x2a, 0x0c, 0x16, 0xbb,
	0x06, 0x5c, 0xc9, 0xe1, 0x66, 0x4b, 0x96, 0xc1, 0x02, 0x21, 0xdc, 0x03, 0x6b, 0x4d, 0xc2, 0x6d,
	0x38, 0x8b, 0xee, 0xd1, 0xf5, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x62, 0x3f, 0x4f, 0x23, 0xfa,
	0x02, 0x00, 0x00,
}
